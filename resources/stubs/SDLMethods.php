<?php

/**
 * This file is part of SDL package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @noinspection PhpInconsistentReturnPointsInspection
 */

declare(strict_types=1);

namespace Serafim\SDL;

use FFI\CCharPtr;
use FFI\CData;
use FFI\CIntPtr;
use FFI\CIntPtrPtr;
use FFI\CPtr;
use FFI\CPtrPtr;
use Serafim\SDL\Kernel\Assert\State;
use Serafim\SDL\Kernel\InitFlags;

/**
 * @formatter:off
 * @method void setAssertionHandler(\Closure|CData $handler, CPtr $userData)
 * @method CData getDefaultAssertionHandler()
 * @method CData getAssertionHandler(CPtrPtr $userData)
 * @method AssertDataPtr getAssertionReport()
 * @method void resetAssertionReport()
 * @method int atomicTryLock(int|CIntPtr $lock)
 * @method void atomicLock(int|CIntPtr $lock)
 * @method void atomicUnlock(int|CIntPtr $lock)
 * @method void memoryBarrierReleaseFunction()
 * @method void memoryBarrierAcquireFunction()
 * @method int atomicCAS(AtomicTPtr|CPtr $a, int $oldValue, int $newValue)
 * @method int atomicCASPtr(CPtrPtr $a, CPtr $oldValue, CPtr $newValue)
 * @method int atomicSet(AtomicTPtr $a, int $v)
 * @method int atomicGet(AtomicTPtr $a)
 * @method int atomicAdd(AtomicTPtr $a, int $v)
 * @method void atomicSetPtr(CPtrPtr $a, CPtr $v)
 * @method void atomicGetPtr(CPtrPtr $a)
 * @method int setError(string|CCharPtr $fmt)
 * @method string|CCharPtr getError()
 * @method void clearError()
 * @method int error(int|CIntPtr $code)
 * @method MutexPtr createMutex()
 * @method int lockMutex(MutexPtr $mutex)
 * @method int tryLockMutex(MutexPtr $mutex)
 * @method int unlockMutex(MutexPtr $mutex)
 * @method void destroyMutex(MutexPtr $mutex)
 * @method SemaphorePtr createSemaphore(int $initialValue)
 * @method void destroySemaphore(SemaphorePtr $sem)
 * @method int semWait(SemaphorePtr $sem)
 * @method int semTryWait(SemaphorePtr $sem)
 * @method int semWaitTimeout(SemaphorePtr $sem, int $ms)
 * @method int semPost(SemaphorePtr $sem)
 * @method int semValue(SemaphorePtr $sem)
 * @method condPtr createCond()
 * @method void destroyCond(condPtr $cond)
 * @method int condSignal(condPtr $cond)
 * @method int condBroadcast(condPtr $cond)
 * @method int condWait(condPtr $cond, MutexPtr $mutex)
 * @method int condWaitTimeout(condPtr $cond, MutexPtr $mutex, int $ms)
 * @method ThreadPtr createThread(\Closure $fn, string|CCharPtr $name, CPtr $data, \Closure $pfnBeginThread, \Closure $pfnEndThread)
 * @method ThreadPtr createThreadWithStackSize(\Closure $fn, string|CCharPtr $name, int $stackSize, CPtr $data, \Closure $pfnBeginThread, \Closure $pfnEndThread)
 * @method string|CCharPtr getThreadName(ThreadPtr $thread)
 * @method int threadID()
 * @method int getThreadID(ThreadPtr $thread)
 * @method int setThreadPriority(int $priority)
 * @method void waitThread(ThreadPtr $thread, int|CIntPtr $status)
 * @method void detachThread(ThreadPtr $thread)
 * @method int tlsCreate()
 * @method CPtr tlsGet(int $id)
 * @method int tlsSet(int $id, CPtr $value, \Closure $destructor)
 * @method RWopsPtr rwFromFile(string|CCharPtr $file, string|CCharPtr $mode)
 * @method RWopsPtr rwFromFP(CPtr $fp, int $autoClose)
 * @method RWopsPtr rwFromMem(CPtr $mem, int $size)
 * @method RWopsPtr rwFromConstMem(CPtr $mem, int $size)
 * @method RWopsPtr allocRw()
 * @method void freeRw(RWopsPtr $area)
 * @method int rwSize(RWopsPtr $context)
 * @method int rwSeek(RWopsPtr $context, int $offset, int $whence)
 * @method int rwTell(RWopsPtr $context)
 * @method int rwRead(RWopsPtr $context, CPtr $ptr, int $size, int $maxNum)
 * @method int rwWrite(RWopsPtr $context, CPtr $ptr, int $size, int $num)
 * @method int rwClose(RWopsPtr $context)
 * @method void loadFileRw(RWopsPtr $src, int $dataSize, int $freeSrc)
 * @method void loadFile(string $file, int $dataSize)
 * @method int readU8(RWopsPtr $src)
 * @method int readLE16(RWopsPtr $src)
 * @method int readBE16(RWopsPtr $src)
 * @method int readLE32(RWopsPtr $src)
 * @method int readBE32(RWopsPtr $src)
 * @method int readLE64(RWopsPtr $src)
 * @method int readBE64(RWopsPtr $src)
 * @method int writeU8(RWopsPtr $dst, int $value)
 * @method int writeLE16(RWopsPtr $dst, int $value)
 * @method int writeBE16(RWopsPtr $dst, int $value)
 * @method int writeLE32(RWopsPtr $dst, int $value)
 * @method int writeBE32(RWopsPtr $dst, int $value)
 * @method int writeLE64(RWopsPtr $dst, int $value)
 * @method int writeBE64(RWopsPtr $dst, int $value)
 * @method int getNumAudioDrivers()
 * @method string getAudioDriver(int $index)
 * @method int audioInit(string $driverName)
 * @method void audioQuit()
 * @method string getCurrentAudioDriver()
 * @method int openAudio(AudioSpecPtr $desired, AudioSpecPtr $obtained)
 * @method int getNumAudioDevices(int $isCapture)
 * @method string getAudioDeviceName(int $index, int $isCapture)
 * @method int|CIntPtr openAudioDevice(string $device, int $isCapture, AudioSpecPtr $desired, AudioSpecPtr $obtained, int $allowedChanges)
 * @method int|CIntPtr getAudioStatus()
 * @method int|CIntPtr getAudioDeviceStatus(int|CIntPtr $dev)
 * @method void pauseAudio(int $pauseOn)
 * @method void pauseAudioDevice(int|CIntPtr $dev, int $pauseOn)
 * @method AudioSpecPtr loadWavRw(RWopsPtr $src, int $freeSrc, AudioSpecPtr $spec, int|CIntPtrPtr $audioBuf, int|CIntPtr $audioLen)
 * @method void freeWav(int $audioBuf)
 * @method int buildAudioCVT(AudioCVTPtr $cvt, int|int $srcFormat, int $srcChannels, int $srcRate, int|int $dstFormat, int $dstChannels, int $dstRate)
 * @method int convertAudio(AudioCVTPtr $cvt)
 * @method AudioStreamPtr newAudioStream(int|int $srcFormat, int $srcChannels, int $srcRate, int|int $dstFormat, int $dstChannels, int $dstRate)
 * @method int audioStreamPut(AudioStreamPtr $stream, CPtr $buf, int $len)
 * @method int audioStreamGet(AudioStreamPtr $stream, CPtr $buf, int $len)
 * @method int audioStreamAvailable(AudioStreamPtr $stream)
 * @method int audioStreamFlush(AudioStreamPtr $stream)
 * @method void audioStreamClear(AudioStreamPtr $stream)
 * @method void freeAudioStream(AudioStreamPtr $stream)
 * @method void mixAudio(int $dst, int $src, int $len, int $volume)
 * @method void mixAudioFormat(int $dst, int $src, int|int $format, int $len, int $volume)
 * @method int queueAudio(int|CIntPtr $dev, CPtr $data, int $len)
 * @method int dequeueAudio(int|CIntPtr $dev, CPtr $data, int $len)
 * @method int getQueuedAudioSize(int|CIntPtr $dev)
 * @method void clearQueuedAudio(int|CIntPtr $dev)
 * @method void lockAudio()
 * @method void lockAudioDevice(int|CIntPtr $dev)
 * @method void unlockAudio()
 * @method void unlockAudioDevice(int|CIntPtr $dev)
 * @method void closeAudio()
 * @method void closeAudioDevice(int|CIntPtr $dev)
 * @method int setClipboardText(string $text)
 * @method string getClipboardText()
 * @method int hasClipboardText()
 * @method int getCPUCount()
 * @method int getCPUCacheLineSize()
 * @method int hasRDTSC()
 * @method int hasAltiVec()
 * @method int hasMMX()
 * @method int has3DNow()
 * @method int hasSSE()
 * @method int hasSSE2()
 * @method int hasSSE3()
 * @method int hasSSE41()
 * @method int hasSSE42()
 * @method int hasAVX()
 * @method int hasAVX2()
 * @method int hasAVX512F()
 * @method int hasNEON()
 * @method int getSystemRAM()
 * @method int getSIMDAlignment()
 * @method void allocSIMD(int $len)
 * @method void freeSIMD(CPtr $ptr)
 * @method string getPixelFormatName(int $format)
 * @method int pixelFormatEnumToMasks(int $format, int $bpp, int $redMask, int $greenMask, int $blueMask, int $alphaMask)
 * @method int masksToPixelFormatEnum(int $bpp, int $redMask, int $greenMask, int $blueMask, int $alphaMask)
 * @method PixelFormatPtr allocFormat(int $pixelFormat)
 * @method void freeFormat(PixelFormatPtr $format)
 * @method PalettePtr allocPalette(int $ncolors)
 * @method int setPixelFormatPalette(PixelFormatPtr $format, PalettePtr $palette)
 * @method int setPaletteColors(PalettePtr $palette, ColorPtr $colors, int $firstcolor, int $ncolors)
 * @method void freePalette(PalettePtr $palette)
 * @method int mapRGB(PixelFormatPtr $format, int $r, int $g, int $b)
 * @method int mapRGBA(PixelFormatPtr $format, int $r, int $g, int $b, int $a)
 * @method void getRGB(int $pixel, PixelFormatPtr $format, int $r, int $g, int $b)
 * @method void getRGBA(int $pixel, PixelFormatPtr $format, int $r, int $g, int $b, int $a)
 * @method void calculateGammaRamp(float $gamma, int $ramp)
 * @method int hasIntersection(RectPtr $A, RectPtr $B)
 * @method int intersectRect(RectPtr $A, RectPtr $B, RectPtr $result)
 * @method void unionRect(RectPtr $A, RectPtr $B, RectPtr $result)
 * @method int enclosePoints(int $points, int $count, RectPtr $clip, RectPtr $result)
 * @method int intersectRectAndLine(RectPtr $rect, int $X1, int $Y1, int $X2, int $Y2)
 * @method int|CIntPtr composeCustomBlendMode(int|CIntPtr $srcColorFactor, int|CIntPtr $dstColorFactor, int|CIntPtr $colorOperation, int|CIntPtr $srcAlphaFactor, int|CIntPtr $dstAlphaFactor, int|CIntPtr $alphaOperation)
 * @method SurfacePtr createRGBSurface(int $flags, int $width, int $height, int $depth, int $redMask, int $greenMask, int $blueMask, int $alphaMask)
 * @method SurfacePtr createRGBSurfaceWithFormat(int $flags, int $width, int $height, int $depth, int $format)
 * @method SurfacePtr createRGBSurfaceFrom(CPtr $pixels, int $width, int $height, int $depth, int $pitch, int $redMask, int $greenMask, int $blueMask, int $alphaMask)
 * @method SurfacePtr createRGBSurfaceWithFormatFrom(CPtr $pixels, int $width, int $height, int $depth, int $pitch, int $format)
 * @method void freeSurface(SurfacePtr $surface)
 * @method int setSurfacePalette(SurfacePtr $surface, PalettePtr $palette)
 * @method int lockSurface(SurfacePtr $surface)
 * @method void unlockSurface(SurfacePtr $surface)
 * @method SurfacePtr loadBmpRw(RWopsPtr $src, int $freeSrc)
 * @method int saveBmpRw(SurfacePtr $surface, RWopsPtr $dst, int $freeDst)
 * @method int setSurfaceRLE(SurfacePtr $surface, int $flag)
 * @method int setColorKey(SurfacePtr $surface, int $flag, int $key)
 * @method int hasColorKey(SurfacePtr $surface)
 * @method int getColorKey(SurfacePtr $surface, int $key)
 * @method int setSurfaceColorMod(SurfacePtr $surface, int $r, int $g, int $b)
 * @method int getSurfaceColorMod(SurfacePtr $surface, int $r, int $g, int $b)
 * @method int setSurfaceAlphaMod(SurfacePtr $surface, int $alpha)
 * @method int getSurfaceAlphaMod(SurfacePtr $surface, int $alpha)
 * @method int setSurfaceBlendMode(SurfacePtr $surface, int|CIntPtr $blendMode)
 * @method int getSurfaceBlendMode(SurfacePtr $surface, int|CIntPtr $blendMode)
 * @method int setClipRect(SurfacePtr $surface, RectPtr $rect)
 * @method void getClipRect(SurfacePtr $surface, RectPtr $rect)
 * @method SurfacePtr duplicateSurface(SurfacePtr $surface)
 * @method SurfacePtr convertSurface(SurfacePtr $src, PixelFormatPtr $fmt, ?int $flags)
 * @method SurfacePtr convertSurfaceFormat(SurfacePtr $src, int $pixelFormat, int $flags)
 * @method int convertPixels(int $width, int $height, int $srcFormat, CPtr $src, int $srcPitch, int $dstFormat, CPtr $dst, int $dstPitch)
 * @method int fillRect(SurfacePtr $dst, RectPtr $rect, int $color)
 * @method int fillRects(SurfacePtr $dst, RectPtr $rects, int $count, int $color)
 * @method int upperBlit(SurfacePtr $src, RectPtr $srcRect, SurfacePtr $dst, RectPtr $dstRect)
 * @method int lowerBlit(SurfacePtr $src, RectPtr $srcRect, SurfacePtr $dst, RectPtr $dstRect)
 * @method int softStretch(SurfacePtr $src, RectPtr $srcRect, SurfacePtr $dst, RectPtr $dstRect)
 * @method int upperBlitScaled(SurfacePtr $src, RectPtr $srcRect, SurfacePtr $dst, RectPtr $dstRect)
 * @method int lowerBlitScaled(SurfacePtr $src, RectPtr $srcRect, SurfacePtr $dst, RectPtr $dstRect)
 * @method void setYUVConversionMode(int|CIntPtr $mode)
 * @method int|CIntPtr getYUVConversionMode()
 * @method int|CIntPtr getYUVConversionModeForResolution(int $width, int $height)
 * @method int getNumVideoDrivers()
 * @method string getVideoDriver(int $index)
 * @method int videoInit(string $driverName)
 * @method void videoQuit()
 * @method string getCurrentVideoDriver()
 * @method int getNumVideoDisplays()
 * @method string getDisplayName(int $displayIndex)
 * @method int getDisplayBounds(int $displayIndex, RectPtr $rect)
 * @method int getDisplayUsableBounds(int $displayIndex, RectPtr $rect)
 * @method int getDisplayDPI(int $displayIndex, float $dDpi, float $hDpi, float $vDpi)
 * @method int|CIntPtr getDisplayOrientation(int $displayIndex)
 * @method int getNumDisplayModes(int $displayIndex)
 * @method int getDisplayMode(int $displayIndex, int $modeIndex, DisplayModePtr $mode)
 * @method int getDesktopDisplayMode(int $displayIndex, DisplayModePtr $mode)
 * @method int getCurrentDisplayMode(int $displayIndex, DisplayModePtr $mode)
 * @method DisplayModePtr|CData getClosestDisplayMode(int $displayIndex, DisplayModePtr $mode, DisplayModePtr $closest)
 * @method int getWindowDisplayIndex(WindowPtr $window)
 * @method int setWindowDisplayMode(WindowPtr $window, DisplayModePtr $mode)
 * @method int getWindowDisplayMode(WindowPtr $window, DisplayModePtr $mode)
 * @method int getWindowPixelFormat(WindowPtr $window)
 * @method WindowPtr createWindow(string $title, int $x, int $y, int $w, int $h, int $flags)
 * @method WindowPtr createWindowFrom(CPtr $data)
 * @method int getWindowID(WindowPtr $window)
 * @method WindowPtr getWindowFromID(int $id)
 * @method int getWindowFlags(WindowPtr $window)
 * @method void setWindowTitle(WindowPtr $window, string $title)
 * @method string getWindowTitle(WindowPtr $window)
 * @method void setWindowIcon(WindowPtr $window, SurfacePtr $icon)
 * @method void setWindowData(WindowPtr $window, string $name, CPtr $userData)
 * @method void getWindowData(WindowPtr $window, string $name)
 * @method void setWindowPosition(WindowPtr $window, int $x, int $y)
 * @method void getWindowPosition(WindowPtr $window, int $x, int $y)
 * @method void setWindowSize(WindowPtr $window, int $w, int $h)
 * @method void getWindowSize(WindowPtr $window, int $w, int $h)
 * @method int getWindowBordersSize(WindowPtr $window, int $top, int $left, int $bottom, int $right)
 * @method void setWindowMinimumSize(WindowPtr $window, int $minWidth, int $minHeight)
 * @method void getWindowMinimumSize(WindowPtr $window, int $w, int $h)
 * @method void setWindowMaximumSize(WindowPtr $window, int $maxWidth, int $maxHeight)
 * @method void getWindowMaximumSize(WindowPtr $window, int $w, int $h)
 * @method void setWindowBordered(WindowPtr $window, int $bordered)
 * @method void setWindowResizable(WindowPtr $window, int $resizable)
 * @method void showWindow(WindowPtr $window)
 * @method void hideWindow(WindowPtr $window)
 * @method void raiseWindow(WindowPtr $window)
 * @method void maximizeWindow(WindowPtr $window)
 * @method void minimizeWindow(WindowPtr $window)
 * @method void restoreWindow(WindowPtr $window)
 * @method int setWindowFullscreen(WindowPtr $window, int $flags)
 * @method SurfacePtr getWindowSurface(WindowPtr $window)
 * @method int updateWindowSurface(WindowPtr $window)
 * @method int updateWindowSurfaceRects(WindowPtr $window, RectPtr $rects, int $numRects)
 * @method void setWindowGrab(WindowPtr $window, int $grabbed)
 * @method int getWindowGrab(WindowPtr $window)
 * @method WindowPtr getGrabbedWindow()
 * @method int setWindowBrightness(WindowPtr $window, float $brightness)
 * @method float getWindowBrightness(WindowPtr $window)
 * @method int setWindowOpacity(WindowPtr $window, float $opacity)
 * @method int getWindowOpacity(WindowPtr $window, float $outOpacity)
 * @method int setWindowModalFor(WindowPtr $modalWindow, WindowPtr $parentWindow)
 * @method int setWindowInputFocus(WindowPtr $window)
 * @method int setWindowGammaRamp(WindowPtr $window, int $red, int $green, int $blue)
 * @method int getWindowGammaRamp(WindowPtr $window, int $red, int $green, int $blue)
 * @method int setWindowHitTest(WindowPtr $window, \Closure|CData $callback, CPtr $callbackData)
 * @method void destroyWindow(WindowPtr $window)
 * @method int isScreenSaverEnabled()
 * @method void enableScreenSaver()
 * @method void disableScreenSaver()
 * @method int glLoadLibrary(string $path)
 * @method void glGetProcAddress(string $proc)
 * @method void glUnloadLibrary()
 * @method int glExtensionSupported(string $extension)
 * @method void glResetAttributes()
 * @method int glSetAttribute(int $attr, int $value)
 * @method int glGetAttribute(int $attr, int $value)
 * @method GLContext glCreateContext(WindowPtr $window)
 * @method int glMakeCurrent(WindowPtr $window, GLContext $context)
 * @method WindowPtr glGetCurrentWindow()
 * @method GLContext glGetCurrentContext()
 * @method void glGetDrawableSize(WindowPtr $window, int $w, int $h)
 * @method int glSetSwapInterval(int $interval)
 * @method int glGetSwapInterval()
 * @method void glSwapWindow(WindowPtr $window)
 * @method void glDeleteContext(GLContext $context)
 * @method WindowPtr getKeyboardFocus()
 * @method int getKeyboardState(int $numKeys)
 * @method int|CIntPtr getModState()
 * @method void setModState(int|CIntPtr $modState)
 * @method int|CIntPtr getKeyFromScanCode(int|CIntPtr $scanCode)
 * @method int|CIntPtr getScanCodeFromKey(int|CIntPtr $key)
 * @method string getScanCodeName(int|CIntPtr $scanCode)
 * @method int|CIntPtr getScanCodeFromName(string $name)
 * @method string getKeyName(int|CIntPtr $key)
 * @method int|CIntPtr getKeyFromName(string $name)
 * @method void startTextInput()
 * @method int isTextInputActive()
 * @method void stopTextInput()
 * @method void setTextInputRect(RectPtr $rect)
 * @method int hasScreenKeyboardSupport()
 * @method int isScreenKeyboardShown(WindowPtr $window)
 * @method WindowPtr getMouseFocus()
 * @method int getMouseState(int $x, int $y)
 * @method int getGlobalMouseState(int $x, int $y)
 * @method int getRelativeMouseState(int $x, int $y)
 * @method void warpMouseInWindow(WindowPtr $window, int $x, int $y)
 * @method int warpMouseGlobal(int $x, int $y)
 * @method int setRelativeMouseMode(int $enabled)
 * @method int captureMouse(int $enabled)
 * @method int getRelativeMouseMode()
 * @method CursorPtr createCursor(int $data, int $mask, int $w, int $h, int $hotX, int $hotY)
 * @method CursorPtr createColorCursor(SurfacePtr $surface, int $hotX, int $hotY)
 * @method CursorPtr createSystemCursor(int|CIntPtr $id)
 * @method void setCursor(CursorPtr $cursor)
 * @method CursorPtr getCursor()
 * @method CursorPtr getDefaultCursor()
 * @method void freeCursor(CursorPtr $cursor)
 * @method int showCursor(int $toggle)
 * @method void lockJoysticks()
 * @method void unlockJoysticks()
 * @method int numJoysticks()
 * @method string joystickNameForIndex(int $deviceIndex)
 * @method int joystickGetDevicePlayerIndex(int $deviceIndex)
 * @method JoystickGUID joystickGetDeviceGUID(int $deviceIndex)
 * @method int joystickGetDeviceVendor(int $deviceIndex)
 * @method int joystickGetDeviceProduct(int $deviceIndex)
 * @method int joystickGetDeviceProductVersion(int $deviceIndex)
 * @method int|CIntPtr joystickGetDeviceType(int $deviceIndex)
 * @method int|CIntPtr joystickGetDeviceInstanceId(int $deviceIndex)
 * @method JoystickPtr joystickOpen(int $deviceIndex)
 * @method JoystickPtr joystickFromInstanceId(int|CIntPtr $joyid)
 * @method string joystickName(JoystickPtr $joystick)
 * @method int joystickGetPlayerIndex(JoystickPtr $joystick)
 * @method JoystickGUID joystickGetGUID(JoystickPtr $joystick)
 * @method int joystickGetVendor(JoystickPtr $joystick)
 * @method int joystickGetProduct(JoystickPtr $joystick)
 * @method int joystickGetProductVersion(JoystickPtr $joystick)
 * @method int|CIntPtr joystickGetType(JoystickPtr $joystick)
 * @method void joystickGetGUIDString(JoystickGUID $guid, string $pszGUID, int $cbGUID)
 * @method JoystickGUID joystickGetGUIDFromString(string $pchGUID)
 * @method int joystickGetAttached(JoystickPtr $joystick)
 * @method int|CIntPtr joystickInstanceId(JoystickPtr $joystick)
 * @method int joystickNumAxes(JoystickPtr $joystick)
 * @method int joystickNumBalls(JoystickPtr $joystick)
 * @method int joystickNumHats(JoystickPtr $joystick)
 * @method int joystickNumButtons(JoystickPtr $joystick)
 * @method void joystickUpdate()
 * @method int joystickEventState(int $state)
 * @method int joystickGetAxis(JoystickPtr $joystick, int $axis)
 * @method int joystickGetAxisInitialState(JoystickPtr $joystick, int $axis, int $state)
 * @method int joystickGetHat(JoystickPtr $joystick, int $hat)
 * @method int joystickGetBall(JoystickPtr $joystick, int $ball, int $dx, int $dy)
 * @method int joystickGetButton(JoystickPtr $joystick, int $button)
 * @method int joystickRumble(JoystickPtr $joystick, int $lowFrequencyRumble, int $highFrequencyRumble, int $duration)
 * @method void joystickClose(JoystickPtr $joystick)
 * @method int|CIntPtr joystickCurrentPowerLevel(JoystickPtr $joystick)
 * @method int gameControllerAddMappingsFromRW(RWopsPtr $rw, int $freeRw)
 * @method int gameControllerAddMapping(string $mappingString)
 * @method int gameControllerNumMappings()
 * @method string gameControllerMappingForIndex(int $mappingIndex)
 * @method string gameControllerMappingForGUID(JoystickGUID $guid)
 * @method string gameControllerMapping(GameControllerPtr $gameController)
 * @method int isGameController(int $joystickIndex)
 * @method string gameControllerNameForIndex(int $joystickIndex)
 * @method string gameControllerMappingForDeviceIndex(int $joystickIndex)
 * @method GameControllerPtr gameControllerOpen(int $joystickIndex)
 * @method GameControllerPtr gameControllerFromInstanceID(int|CIntPtr $joyid)
 * @method string gameControllerName(GameControllerPtr $gameController)
 * @method int gameControllerGetPlayerIndex(GameControllerPtr $gameController)
 * @method int gameControllerGetVendor(GameControllerPtr $gameController)
 * @method int gameControllerGetProduct(GameControllerPtr $gameController)
 * @method int gameControllerGetProductVersion(GameControllerPtr $gameController)
 * @method int gameControllerGetAttached(GameControllerPtr $gameController)
 * @method JoystickPtr gameControllerGetJoystick(GameControllerPtr $gameController)
 * @method int gameControllerEventState(int $state)
 * @method void gameControllerUpdate()
 * @method int|CIntPtr gameControllerGetAxisFromString(string $pchString)
 * @method string gameControllerGetStringForAxis(int|CIntPtr $axis)
 * @method GameControllerButtonBind gameControllerGetBindForAxis(GameControllerPtr $gameController, int|CIntPtr $axis)
 * @method int gameControllerGetAxis(GameControllerPtr $gameController, int|CIntPtr $axis)
 * @method int|CIntPtr gameControllerGetButtonFromString(string $pchString)
 * @method string gameControllerGetStringForButton(int|CIntPtr $button)
 * @method GameControllerButtonBind gameControllerGetBindForButton(GameControllerPtr $gameController, int|CIntPtr $button)
 * @method int gameControllerGetButton(GameControllerPtr $gameController, int|CIntPtr $button)
 * @method int gameControllerRumble(GameControllerPtr $gameController, int $lowFrequencyRumble, int $highFrequencyRumble, int $duration)
 * @method void gameControllerClose(GameControllerPtr $gameController)
 * @method int getNumTouchDevices()
 * @method int|CIntPtr getTouchDevice(int $index)
 * @method int|CIntPtr getTouchDeviceType(int|CIntPtr $touchID)
 * @method int getNumTouchFingers(int|CIntPtr $touchID)
 * @method FingerPtr getTouchFinger(int|CIntPtr $touchID, int $index)
 * @method int recordGesture(int|CIntPtr $touchId)
 * @method int saveAllDollarTemplates(RWopsPtr $dst)
 * @method int saveDollarTemplate(int|CIntPtr $gestureId, RWopsPtr $dst)
 * @method int loadDollarTemplates(int|CIntPtr $touchId, RWopsPtr $src)
 * @method void pumpEvents()
 * @method int peepEvents(EventPtr $events, int $numevents, int $action, int $minType, int $maxType)
 * @method int hasEvent(int $type)
 * @method int hasEvents(int $minType, int $maxType)
 * @method void flushEvent(int $type)
 * @method void flushEvents(int $minType, int $maxType)
 * @method int pollEvent(EventPtr $event)
 * @method int waitEvent(EventPtr $event)
 * @method int waitEventTimeout(EventPtr $event, int $timeout)
 * @method int pushEvent(EventPtr $event)
 * @method void setEventFilter(EventFilterPtr $filter, CPtr $userData)
 * @method int getEventFilter(EventFilterPtr $filter, CPtrPtr $userData)
 * @method void addEventWatch(EventFilterPtr $filter, CPtr $userData)
 * @method void delEventWatch(EventFilterPtr $filter, CPtr $userData)
 * @method void filterEvents(EventFilterPtr $filter, CPtr $userData)
 * @method int eventState(int $type, int $state)
 * @method int registerEvents(int $numEvents)
 * @method string getBasePath()
 * @method string getPrefPath(string $org, string $app)
 * @method int numHaptics()
 * @method string hapticName(int $deviceIndex)
 * @method HapticPtr hapticOpen(int $deviceIndex)
 * @method int hapticOpened(int $deviceIndex)
 * @method int hapticIndex(HapticPtr $haptic)
 * @method int mouseIsHaptic()
 * @method HapticPtr hapticOpenFromMouse()
 * @method int joystickIsHaptic(JoystickPtr $joystick)
 * @method HapticPtr hapticOpenFromJoystick(JoystickPtr $joystick)
 * @method void hapticClose(HapticPtr $haptic)
 * @method int hapticNumEffects(HapticPtr $haptic)
 * @method int hapticNumEffectsPlaying(HapticPtr $haptic)
 * @method int hapticQuery(HapticPtr $haptic)
 * @method int hapticNumAxes(HapticPtr $haptic)
 * @method int hapticEffectSupported(HapticPtr $haptic, HapticEffectPtr $effect)
 * @method int hapticNewEffect(HapticPtr $haptic, HapticEffectPtr $effect)
 * @method int hapticUpdateEffect(HapticPtr $haptic, int $effect, HapticEffectPtr $data)
 * @method int hapticRunEffect(HapticPtr $haptic, int $effect, int $iterations)
 * @method int hapticStopEffect(HapticPtr $haptic, int $effect)
 * @method void hapticDestroyEffect(HapticPtr $haptic, int $effect)
 * @method int hapticGetEffectStatus(HapticPtr $haptic, int $effect)
 * @method int hapticSetGain(HapticPtr $haptic, int $gain)
 * @method int hapticSetAutocenter(HapticPtr $haptic, int $autocenter)
 * @method int hapticPause(HapticPtr $haptic)
 * @method int hapticUnpause(HapticPtr $haptic)
 * @method int hapticStopAll(HapticPtr $haptic)
 * @method int hapticRumbleSupported(HapticPtr $haptic)
 * @method int hapticRumbleInit(HapticPtr $haptic)
 * @method int hapticRumblePlay(HapticPtr $haptic, float $strength, int $length)
 * @method int hapticRumbleStop(HapticPtr $haptic)
 * @method int setHintWithPriority(string $name, string $value, int $priority)
 * @method int setHint(string $name, string $value)
 * @method string getHint(string $name)
 * @method int getHintBoolean(string $name, int $defaultValue)
 * @method void addHintCallback(string $name, int $callback, CPtr $userData)
 * @method void delHintCallback(string $name, int $callback, CPtr $userData)
 * @method void clearHints()
 * @method void loadObject(string $sofile)
 * @method void loadFunction(CPtr $handle, string $name)
 * @method void unloadObject(CPtr $handle)
 * @method void logSetAllPriority(LogPriority $priority)
 * @method void logSetPriority(int $category, LogPriority $priority)
 * @method LogPriority logGetPriority(int $category)
 * @method void logResetPriorities()
 * @method void log(string $fmt)
 * @method void logVerbose(int $category, string $fmt)
 * @method void logDebug(int $category, string $fmt)
 * @method void logInfo(int $category, string $fmt)
 * @method void logWarn(int $category, string $fmt)
 * @method void logError(int $category, string $fmt)
 * @method void logCritical(int $category, string $fmt)
 * @method void logMessage(int $category, LogPriority $priority, string $fmt)
 * @method void logMessageV(int $category, LogPriority $priority, string $fmt, object $ap)
 * @method void logGetOutputFunction(LogOutputFunctionPtr $callback, CPtrPtr $userData)
 * @method void logSetOutputFunction(LogOutputFunctionPtr $callback, CPtr $userData)
 * @method int showMessageBox(MessageBoxDataPtr $messageBoxData, int|CIntPtr $buttonId)
 * @method int showSimpleMessageBox(int $flags, string|CData $title, string|CData $message, ?Window|?CData $window)
 * @method int getPowerInfo(int $secs, int $pct)
 * @method int getNumRenderDrivers()
 * @method int getRenderDriverInfo(int $index, RendererInfoPtr $info)
 * @method int createWindowAndRenderer(int $width, int $height, int $windowFlags, WindowPtrPtr $window, RendererPtrPtr $renderer)
 * @method RendererPtr createRenderer(WindowPtr $window, int $index, int $flags)
 * @method RendererPtr createSoftwareRenderer(SurfacePtr $surface)
 * @method RendererPtr getRenderer(WindowPtr $window)
 * @method int getRendererInfo(RendererPtr $renderer, RendererInfoPtr $info)
 * @method int getRendererOutputSize(RendererPtr $renderer, int $w, int $h)
 * @method TexturePtr createTexture(RendererPtr $renderer, int $format, int $access, int $w, int $h)
 * @method TexturePtr createTextureFromSurface(RendererPtr $renderer, SurfacePtr $surface)
 * @method int queryTexture(TexturePtr $texture, int $format, int $access, int $w, int $h)
 * @method int setTextureColorMod(TexturePtr $texture, int $r, int $g, int $b)
 * @method int getTextureColorMod(TexturePtr $texture, int $r, int $g, int $b)
 * @method int setTextureAlphaMod(TexturePtr $texture, int $alpha)
 * @method int getTextureAlphaMod(TexturePtr $texture, int $alpha)
 * @method int setTextureBlendMode(TexturePtr $texture, int|CIntPtr $blendMode)
 * @method int getTextureBlendMode(TexturePtr $texture, int|CIntPtr $blendMode)
 * @method int updateTexture(TexturePtr $texture, RectPtr $rect, CPtr $pixels, int $pitch)
 * @method int updateYUVTexture(TexturePtr $texture, RectPtr $rect, int $yPlane, int $yPitch, int $uPlane, int $uPitch, int $vPlane, int $vPitch)
 * @method int lockTexture(TexturePtr $texture, RectPtr $rect, CPtrPtr $pixels, int $pitch)
 * @method void unlockTexture(TexturePtr $texture)
 * @method int renderTargetSupported(RendererPtr $renderer)
 * @method int setRenderTarget(RendererPtr $renderer, TexturePtr $texture)
 * @method TexturePtr getRenderTarget(RendererPtr $renderer)
 * @method int renderSetLogicalSize(RendererPtr $renderer, int $w, int $h)
 * @method void renderGetLogicalSize(RendererPtr $renderer, int $w, int $h)
 * @method int renderSetIntegerScale(RendererPtr $renderer, int $enable)
 * @method int renderGetIntegerScale(RendererPtr $renderer)
 * @method int renderSetViewport(RendererPtr $renderer, RectPtr $rect)
 * @method void renderGetViewport(RendererPtr $renderer, RectPtr $rect)
 * @method int renderSetClipRect(RendererPtr $renderer, RectPtr $rect)
 * @method void renderGetClipRect(RendererPtr $renderer, RectPtr $rect)
 * @method int renderIsClipEnabled(RendererPtr $renderer)
 * @method int renderSetScale(RendererPtr $renderer, float $scaleX, float $scaleY)
 * @method void renderGetScale(RendererPtr $renderer, float $scaleX, float $scaleY)
 * @method int setRenderDrawColor(RendererPtr $renderer, int $r, int $g, int $b, int $a)
 * @method int getRenderDrawColor(RendererPtr $renderer, int $r, int $g, int $b, int $a)
 * @method int setRenderDrawBlendMode(RendererPtr $renderer, int|CIntPtr $blendMode)
 * @method int getRenderDrawBlendMode(RendererPtr $renderer, int|CIntPtr $blendMode)
 * @method int renderClear(RendererPtr $renderer)
 * @method int renderDrawPoint(RendererPtr $renderer, int $x, int $y)
 * @method int renderDrawPoints(RendererPtr $renderer, int $points, int $count)
 * @method int renderDrawLine(RendererPtr $renderer, int $x1, int $y1, int $x2, int $y2)
 * @method int renderDrawLines(RendererPtr $renderer, int $points, int $count)
 * @method int renderDrawRect(RendererPtr $renderer, RectPtr $rect)
 * @method int renderDrawRects(RendererPtr $renderer, RectPtr $rects, int $count)
 * @method int renderFillRect(RendererPtr $renderer, RectPtr $rect)
 * @method int renderFillRects(RendererPtr $renderer, RectPtr $rects, int $count)
 * @method int renderCopy(RendererPtr $renderer, TexturePtr $texture, RectPtr|null $srcRect, RectPtr|null $dstRect)
 * @method int renderCopyEx(RendererPtr $renderer, TexturePtr $texture, RectPtr $srcRect, RectPtr $dstRect, float $angle, int $center, int $flip)
 * @method int renderDrawPointF(RendererPtr $renderer, float $x, float $y)
 * @method int renderDrawPointsF(RendererPtr $renderer, int $points, int $count)
 * @method int renderDrawLineF(RendererPtr $renderer, float $x1, float $y1, float $x2, float $y2)
 * @method int renderDrawLinesF(RendererPtr $renderer, int $points, int $count)
 * @method int renderDrawRectF(RendererPtr $renderer, FRectPtr $rect)
 * @method int renderDrawRectsF(RendererPtr $renderer, FRectPtr $rects, int $count)
 * @method int renderFillRectF(RendererPtr $renderer, FRectPtr $rect)
 * @method int renderFillRectsF(RendererPtr $renderer, FRectPtr $rects, int $count)
 * @method int renderCopyF(RendererPtr $renderer, TexturePtr $texture, RectPtr $srcRect, FRectPtr $dstRect)
 * @method int renderCopyExF(RendererPtr $renderer, TexturePtr $texture, RectPtr $srcRect, FRectPtr $dstRect, float $angle, int $center, int $flip)
 * @method int renderReadPixels(RendererPtr $renderer, RectPtr $rect, int $format, CPtr $pixels, int $pitch)
 * @method void renderPresent(RendererPtr $renderer)
 * @method void destroyTexture(TexturePtr $texture)
 * @method void destroyRenderer(RendererPtr $renderer)
 * @method int renderFlush(RendererPtr $renderer)
 * @method int glBindTexture(TexturePtr $texture, float $texw, float $texh)
 * @method int glUnbindTexture(TexturePtr $texture)
 * @method void renderGetMetalLayer(RendererPtr $renderer)
 * @method void renderGetMetalCommandEncoder(RendererPtr $renderer)
 * @method int numSensors()
 * @method string sensorGetDeviceName(int $deviceIndex)
 * @method int sensorGetDeviceType(int $deviceIndex)
 * @method int sensorGetDeviceNonPortableType(int $deviceIndex)
 * @method int sensorGetDeviceInstanceID(int $deviceIndex)
 * @method SensorPtr sensorOpen(int $deviceIndex)
 * @method SensorPtr sensorFromInstanceID(int $instanceId)
 * @method string sensorGetName(SensorPtr $sensor)
 * @method int sensorGetType(SensorPtr $sensor)
 * @method int sensorGetNonPortableType(SensorPtr $sensor)
 * @method int sensorGetInstanceID(SensorPtr $sensor)
 * @method int sensorGetData(SensorPtr $sensor, float $data, int $numValues)
 * @method void sensorClose(SensorPtr $sensor)
 * @method void sensorUpdate()
 * @method WindowPtr createShapedWindow(string $title, int $x, int $y, int $w, int $h, int $flags)
 * @method int isShapedWindow(WindowPtr $window)
 * @method int setWindowShape(WindowPtr $window, SurfacePtr $shape, WindowShapeModePtr $shapeMode)
 * @method int getShapedWindowMode(WindowPtr $window, WindowShapeModePtr $shapeMode)
 * @method void setWindowsMessageHook(\Closure $callback, CPtr $userData)
 * @method int direct3D9GetAdapterIndex(int $displayIndex)
 * @method IDirect3DDevice9 renderGetD3D9Device(RendererPtr $renderer)
 * @method int getDXGIOutputInfo(int $displayIndex, int $adapterIndex, int $outputIndex)
 * @method int isTablet()
 * @method int getTicks()
 * @method int getPerformanceCounter()
 * @method int getPerformanceFrequency()
 * @method void delay(int $ms)
 * @method int addTimer(int $interval, \Closure $callback, CPtr $param)
 * @method int removeTimer(int $id)
 * @method void getVersion(VersionPtr $ver)
 * @method string getRevision()
 * @method int getRevisionNumber()
 * @method int initSubSystem(int $flags)
 * @method void quitSubSystem(int $flags)
 * @method int wasInit(int $flags)
 *
 * @formatter:on
 */
interface SDLMethods
{
    /**
     * Use this function to get the name of the platform.
     *
     * Note: PHP contains a similar implementation @see \PHP_OS_FAMILY
     *
     * <code>
     *  extern const char* getPlatform(void);
     * </code>
     *
     * @see https://wiki.libsdl.org/getPlatform
     * @return string Returns the name of the platform. If the correct platform
     *                name is not available, returns a string beginning with the
     *                text "Unknown".
     */
    public function getPlatform(): string;

    /**
     * Get the number of outstanding (unfreed) allocations.
     *
     * <code>
     *  extern int getNumAllocations(void);
     * </code>
     *
     * @return int
     * @since 2.0.7
     */
    public function getNumAllocations(): int;

    /**
     * Use this function to circumvent failure of init() when not using
     * SDL_main() as an entry point.
     *
     * <code>
     *  extern void setMainReady(void);
     * </code>
     *
     * @see https://wiki.libsdl.org/setMainReady
     * @return void
     */
    public function setMainReady(): void;

    /**
     * <code>
     *  extern int registerApp(char* name, Uint32 style, void* hInst);
     * </code>
     *
     * @param string|CCharPtr $name
     * @param int $style
     * @param mixed|CPtr $hInst
     * @return int
     * @since 2.0.2
     */
    public function registerApp(string $name, int $style, $hInst): int;

    /**
     * <code>
     *  extern void unregisterApp(void);
     * </code>
     *
     * @return void
     * @since 2.0.2
     */
    public function unregisterApp(): void;

    /**
     * These function are for internal use and not meant to be documented.
     *
     * TODO Is it worth it to remove from the API?
     *
     * <code>
     *  extern AssertState reportAssertion(assertData* data, const char* func, const char* file, int line);
     * </code>
     *
     * @param AssertDataPtr|CPtr $data
     * @param string|CCharPtr $func
     * @param string|CCharPtr $file
     * @param int $line
     * @return int|int<State>
     */
    public function reportAssertion(AssertDataPtr $data, string $func, string $file, int $line): int;

    /**
     * Use this function to initialize the SDL library.
     * This must be called before using most other SDL functions.
     *
     * <code>
     *  extern int init(Uint32 flags);
     * </code>
     *
     * @see https://wiki.libsdl.org/init
     * @param int|int<InitFlags> $flags
     * @return int
     */
    public function init(int $flags): int;

    /**
     * Use this function to clean up all initialized subsystems.
     * You should call it upon all exit conditions.
     *
     * <code>
     *  extern void quit(void);
     * </code>
     *
     * @see https://wiki.libsdl.org/quit
     * @return void
     */
    public function quit(): void;
}
