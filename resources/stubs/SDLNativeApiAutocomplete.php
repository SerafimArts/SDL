<?php

/**
 * This file is part of SDL package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @noinspection PhpInconsistentReturnPointsInspection
 */

declare(strict_types=1);

namespace Serafim\SDL;

use FFI\CCharPtr;
use FFI\CData;
use FFI\CFloatPtr;
use FFI\CIntPtr;
use FFI\CIntPtrPtr;
use FFI\CPtr;
use FFI\CPtrPtr;
use Serafim\SDL\Kernel\Assert\State;
use Serafim\SDL\Kernel\InitFlags;

/**
 * @formatter:off
 * @method void SDL_AddEventWatch(EventFilterPtr $filter, CPtr $userdata)
 * @method void SDL_AddHintCallback(string $name, int $callback, CPtr $userdata)
 * @method int SDL_AddTimer(int $interval, \Closure $callback, CPtr $param)
 * @method PixelFormatPtr SDL_AllocFormat(int $pixel_format)
 * @method PalettePtr SDL_AllocPalette(int $ncolors)
 * @method RWopsPtr SDL_AllocRW()
 * @method int SDL_AtomicAdd(AtomicTPtr $a, int $v)
 * @method int SDL_AtomicCAS(AtomicTPtr|CPtr $a, int $oldval, int $newval)
 * @method int SDL_AtomicCASPtr(CPtrPtr $a, CPtr $oldval, CPtr $newval)
 * @method int SDL_AtomicGet(AtomicTPtr $a)
 * @method void SDL_AtomicGetPtr(CPtrPtr $a)
 * @method void SDL_AtomicLock(int|CIntPtr $lock)
 * @method int SDL_AtomicSet(AtomicTPtr $a, int $v)
 * @method void SDL_AtomicSetPtr(CPtrPtr $a, CPtr $v)
 * @method int SDL_AtomicTryLock(int|CIntPtr $lock)
 * @method void SDL_AtomicUnlock(int|CIntPtr $lock)
 * @method int SDL_AudioInit(string $driver_name)
 * @method void SDL_AudioQuit()
 * @method int SDL_AudioStreamAvailable(AudioStreamPtr $stream)
 * @method void SDL_AudioStreamClear(AudioStreamPtr $stream)
 * @method int SDL_AudioStreamFlush(AudioStreamPtr $stream)
 * @method int SDL_AudioStreamGet(AudioStreamPtr $stream, CPtr $buf, int $len)
 * @method int SDL_AudioStreamPut(AudioStreamPtr $stream, CPtr $buf, int $len)
 * @method int SDL_BuildAudioCVT(AudioCVTPtr $cvt, int|int $src_format, int $src_channels, int $src_rate, int|int $dst_format, int $dst_channels, int $dst_rate)
 * @method void SDL_CalculateGammaRamp(float $gamma, int $ramp)
 * @method int SDL_CaptureMouse(int $enabled)
 * @method void SDL_ClearError()
 * @method void SDL_ClearHints()
 * @method void SDL_ClearQueuedAudio(int|CIntPtr $dev)
 * @method void SDL_CloseAudio()
 * @method void SDL_CloseAudioDevice(int|CIntPtr $dev)
 * @method int|CIntPtr SDL_ComposeCustomBlendMode(int|CIntPtr $srcColorFactor, int|CIntPtr $dstColorFactor, int|CIntPtr $colorOperation, int|CIntPtr $srcAlphaFactor, int|CIntPtr $dstAlphaFactor, int|CIntPtr $alphaOperation)
 * @method int SDL_CondBroadcast(condPtr $cond)
 * @method int SDL_CondSignal(condPtr $cond)
 * @method int SDL_CondWait(condPtr $cond, MutexPtr $mutex)
 * @method int SDL_CondWaitTimeout(condPtr $cond, MutexPtr $mutex, int $ms)
 * @method int SDL_ConvertAudio(AudioCVTPtr $cvt)
 * @method int SDL_ConvertPixels(int $width, int $height, int $src_format, CPtr $src, int $src_pitch, int $dst_format, CPtr $dst, int $dst_pitch)
 * @method SurfacePtr SDL_ConvertSurface(SurfacePtr $src, PixelFormatPtr $fmt, ?int $flags)
 * @method SurfacePtr SDL_ConvertSurfaceFormat(SurfacePtr $src, int $pixel_format, int $flags)
 * @method CursorPtr SDL_CreateColorCursor(SurfacePtr $surface, int $hot_x, int $hot_y)
 * @method CondPtr SDL_CreateCond()
 * @method CursorPtr SDL_CreateCursor(int $data, int $mask, int $w, int $h, int $hot_x, int $hot_y)
 * @method MutexPtr SDL_CreateMutex()
 * @method SurfacePtr SDL_CreateRGBSurface(int $flags, int $width, int $height, int $depth, int $Rmask, int $Gmask, int $Bmask, int $Amask)
 * @method SurfacePtr SDL_CreateRGBSurfaceFrom(CPtr $pixels, int $width, int $height, int $depth, int $pitch, int $Rmask, int $Gmask, int $Bmask, int $Amask)
 * @method SurfacePtr SDL_CreateRGBSurfaceWithFormat(int $flags, int $width, int $height, int $depth, int $format)
 * @method SurfacePtr SDL_CreateRGBSurfaceWithFormatFrom(CPtr $pixels, int $width, int $height, int $depth, int $pitch, int $format)
 * @method RendererPtr SDL_CreateRenderer(WindowPtr $window, int $index, int $flags)
 * @method SemaphorePtr SDL_CreateSemaphore(int $initial_value)
 * @method WindowPtr SDL_CreateShapedWindow(string $title, int $x, int $y, int $w, int $h, int $flags)
 * @method RendererPtr SDL_CreateSoftwareRenderer(SurfacePtr $surface)
 * @method CursorPtr SDL_CreateSystemCursor(int|CIntPtr $id)
 * @method TexturePtr SDL_CreateTexture(RendererPtr $renderer, int $format, int $access, int $w, int $h)
 * @method TexturePtr SDL_CreateTextureFromSurface(RendererPtr $renderer, SurfacePtr $surface)
 * @method ThreadPtr SDL_CreateThread(\Closure $fn, string|CCharPtr $name, CPtr $data, \Closure $pfnBeginThread, \Closure $pfnEndThread)
 * @method ThreadPtr SDL_CreateThreadWithStackSize(\Closure $fn, string|CCharPtr $name, int $stacksize, CPtr $data, \Closure $pfnBeginThread, \Closure $pfnEndThread)
 * @method WindowPtr SDL_CreateWindow(string $title, int $x, int $y, int $w, int $h, int $flags)
 * @method int SDL_CreateWindowAndRenderer(int $width, int $height, int $window_flags, WindowPtrPtr $window, RendererPtrPtr $renderer)
 * @method WindowPtr SDL_CreateWindowFrom(CPtr $data)
 * @method int SDL_DXGIGetOutputInfo(int $displayIndex, int $adapterIndex, int $outputIndex)
 * @method void SDL_DelEventWatch(EventFilterPtr $filter, CPtr $userdata)
 * @method void SDL_DelHintCallback(string $name, int $callback, CPtr $userdata)
 * @method void SDL_Delay(int $ms)
 * @method int SDL_DequeueAudio(int|CIntPtr $dev, CPtr $data, int $len)
 * @method void SDL_DestroyCond(condPtr $cond)
 * @method void SDL_DestroyMutex(mutexPtr $mutex)
 * @method void SDL_DestroyRenderer(RendererPtr $renderer)
 * @method void SDL_DestroySemaphore(SemaphorePtr $sem)
 * @method void SDL_DestroyTexture(TexturePtr $texture)
 * @method void SDL_DestroyWindow(WindowPtr $window)
 * @method void SDL_DetachThread(ThreadPtr $thread)
 * @method int SDL_Direct3D9GetAdapterIndex(int $displayIndex)
 * @method void SDL_DisableScreenSaver()
 * @method SurfacePtr SDL_DuplicateSurface(SurfacePtr $surface)
 * @method void SDL_EnableScreenSaver()
 * @method int SDL_EnclosePoints(int $points, int $count, RectPtr $clip, RectPtr $result)
 * @method int SDL_Error(int|CIntPtr $code)
 * @method int SDL_EventState(int $type, int $state)
 * @method int SDL_FillRect(SurfacePtr $dst, RectPtr $rect, int $color)
 * @method int SDL_FillRects(SurfacePtr $dst, RectPtr $rects, int $count, int $color)
 * @method void SDL_FilterEvents(EventFilterPtr $filter, CPtr $userdata)
 * @method void SDL_FlushEvent(int $type)
 * @method void SDL_FlushEvents(int $minType, int $maxType)
 * @method void SDL_FreeAudioStream(AudioStreamPtr $stream)
 * @method void SDL_FreeCursor(CursorPtr $cursor)
 * @method void SDL_FreeFormat(PixelFormatPtr $format)
 * @method void SDL_FreePalette(PalettePtr $palette)
 * @method void SDL_FreeRW(RWopsPtr $area)
 * @method void SDL_FreeSurface(SurfacePtr $surface)
 * @method void SDL_FreeWAV(int $audio_buf)
 * @method int SDL_GL_BindTexture(TexturePtr $texture, CFloatPtr $texw, CFloatPtr $texh)
 * @method GLContext SDL_GL_CreateContext(WindowPtr $window)
 * @method void SDL_GL_DeleteContext(GLContext $context)
 * @method int SDL_GL_ExtensionSupported(string $extension)
 * @method int SDL_GL_GetAttribute(int $attr, CIntPtr $value)
 * @method GLContext SDL_GL_GetCurrentContext()
 * @method WindowPtr SDL_GL_GetCurrentWindow()
 * @method void SDL_GL_GetDrawableSize(WindowPtr $window, CIntPtr $w, CIntPtr $h)
 * @method CPtr SDL_GL_GetProcAddress(string $proc)
 * @method int SDL_GL_GetSwapInterval()
 * @method int SDL_GL_LoadLibrary(?string $path)
 * @method int SDL_GL_MakeCurrent(WindowPtr $window, GLContext $context)
 * @method void SDL_GL_ResetAttributes()
 * @method int SDL_GL_SetAttribute(int $attr, int $value)
 * @method int SDL_GL_SetSwapInterval(int $interval)
 * @method void SDL_GL_SwapWindow(WindowPtr $window)
 * @method int SDL_GL_UnbindTexture(TexturePtr $texture)
 * @method void SDL_GL_UnloadLibrary()
 * @method int SDL_GameControllerAddMapping(string $mappingString)
 * @method int SDL_GameControllerAddMappingsFromRW(RWopsPtr $rw, int $freerw)
 * @method void SDL_GameControllerClose(GameControllerPtr $gamecontroller)
 * @method int SDL_GameControllerEventState(int $state)
 * @method GameControllerPtr SDL_GameControllerFromInstanceID(int|CIntPtr $joyid)
 * @method int SDL_GameControllerGetAttached(GameControllerPtr $gamecontroller)
 * @method int SDL_GameControllerGetAxis(GameControllerPtr $gamecontroller, int|CIntPtr $axis)
 * @method int|CIntPtr SDL_GameControllerGetAxisFromString(string $pchString)
 * @method GameControllerButtonBind SDL_GameControllerGetBindForAxis(GameControllerPtr $gamecontroller, int|CIntPtr $axis)
 * @method GameControllerButtonBind SDL_GameControllerGetBindForButton(GameControllerPtr $gamecontroller, int|CIntPtr $button)
 * @method int SDL_GameControllerGetButton(GameControllerPtr $gamecontroller, int|CIntPtr $button)
 * @method int|CIntPtr SDL_GameControllerGetButtonFromString(string $pchString)
 * @method JoystickPtr SDL_GameControllerGetJoystick(GameControllerPtr $gamecontroller)
 * @method int SDL_GameControllerGetPlayerIndex(GameControllerPtr $gamecontroller)
 * @method int SDL_GameControllerGetProduct(GameControllerPtr $gamecontroller)
 * @method int SDL_GameControllerGetProductVersion(GameControllerPtr $gamecontroller)
 * @method string SDL_GameControllerGetStringForAxis(int|CIntPtr $axis)
 * @method string SDL_GameControllerGetStringForButton(int|CIntPtr $button)
 * @method int SDL_GameControllerGetVendor(GameControllerPtr $gamecontroller)
 * @method string SDL_GameControllerMapping(GameControllerPtr $gamecontroller)
 * @method string SDL_GameControllerMappingForDeviceIndex(int $joystick_index)
 * @method string SDL_GameControllerMappingForGUID(JoystickGUID $guid)
 * @method string SDL_GameControllerMappingForIndex(int $mapping_index)
 * @method string SDL_GameControllerName(GameControllerPtr $gamecontroller)
 * @method string SDL_GameControllerNameForIndex(int $joystick_index)
 * @method int SDL_GameControllerNumMappings()
 * @method GameControllerPtr SDL_GameControllerOpen(int $joystick_index)
 * @method int SDL_GameControllerRumble(GameControllerPtr $gamecontroller, int $low_frequency_rumble, int $high_frequency_rumble, int $duration_ms)
 * @method void SDL_GameControllerUpdate()
 * @method CData SDL_GetAssertionHandler(CPtrPtr $puserdata)
 * @method AssertDataPtr SDL_GetAssertionReport()
 * @method string SDL_GetAudioDeviceName(int $index, int $iscapture)
 * @method int|CIntPtr SDL_GetAudioDeviceStatus(int|CIntPtr $dev)
 * @method string SDL_GetAudioDriver(int $index)
 * @method int|CIntPtr SDL_GetAudioStatus()
 * @method string SDL_GetBasePath()
 * @method int SDL_GetCPUCacheLineSize()
 * @method int SDL_GetCPUCount()
 * @method void SDL_GetClipRect(SurfacePtr $surface, RectPtr $rect)
 * @method string SDL_GetClipboardText()
 * @method DisplayModePtr|CData SDL_GetClosestDisplayMode(int $displayIndex, DisplayModePtr $mode, DisplayModePtr $closest)
 * @method int SDL_GetColorKey(SurfacePtr $surface, int $key)
 * @method string SDL_GetCurrentAudioDriver()
 * @method int SDL_GetCurrentDisplayMode(int $displayIndex, DisplayModePtr $mode)
 * @method string SDL_GetCurrentVideoDriver()
 * @method CursorPtr SDL_GetCursor()
 * @method CData SDL_GetDefaultAssertionHandler()
 * @method CursorPtr SDL_GetDefaultCursor()
 * @method int SDL_GetDesktopDisplayMode(int $displayIndex, DisplayModePtr $mode)
 * @method int SDL_GetDisplayBounds(int $displayIndex, RectPtr $rect)
 * @method int SDL_GetDisplayDPI(int $displayIndex, float $ddpi, float $hdpi, float $vdpi)
 * @method int SDL_GetDisplayMode(int $displayIndex, int $modeIndex, DisplayModePtr $mode)
 * @method string SDL_GetDisplayName(int $displayIndex)
 * @method int|CIntPtr SDL_GetDisplayOrientation(int $displayIndex)
 * @method int SDL_GetDisplayUsableBounds(int $displayIndex, RectPtr $rect)
 * @method string|CCharPtr SDL_GetError()
 * @method int SDL_GetEventFilter(EventFilterPtr $filter, CPtrPtr $userdata)
 * @method int SDL_GetGlobalMouseState(int $x, int $y)
 * @method WindowPtr SDL_GetGrabbedWindow()
 * @method string SDL_GetHint(string $name)
 * @method int SDL_GetHintBoolean(string $name, int $default_value)
 * @method int|CIntPtr SDL_GetKeyFromName(string $name)
 * @method int|CIntPtr SDL_GetKeyFromScancode(int|CIntPtr $scancode)
 * @method string SDL_GetKeyName(int|CIntPtr $key)
 * @method WindowPtr SDL_GetKeyboardFocus()
 * @method int SDL_GetKeyboardState(int $numkeys)
 * @method int|CIntPtr SDL_GetModState()
 * @method WindowPtr SDL_GetMouseFocus()
 * @method int SDL_GetMouseState(int $x, int $y)
 * @method int SDL_GetNumAllocations()
 * @method int SDL_GetNumAudioDevices(int $iscapture)
 * @method int SDL_GetNumAudioDrivers()
 * @method int SDL_GetNumDisplayModes(int $displayIndex)
 * @method int SDL_GetNumRenderDrivers()
 * @method int SDL_GetNumTouchDevices()
 * @method int SDL_GetNumTouchFingers(int|CIntPtr $touchID)
 * @method int SDL_GetNumVideoDisplays()
 * @method int SDL_GetNumVideoDrivers()
 * @method int SDL_GetPerformanceCounter()
 * @method int SDL_GetPerformanceFrequency()
 * @method string SDL_GetPixelFormatName(int $format)
 * @method string SDL_GetPlatform()
 * @method int SDL_GetPowerInfo(int $secs, int $pct)
 * @method string SDL_GetPrefPath(string $org, string $app)
 * @method int SDL_GetQueuedAudioSize(int|CIntPtr $dev)
 * @method void SDL_GetRGB(int $pixel, PixelFormatPtr $format, int $r, int $g, int $b)
 * @method void SDL_GetRGBA(int $pixel, PixelFormatPtr $format, int $r7, int $g, int $b, int $a)
 * @method int SDL_GetRelativeMouseMode()
 * @method int SDL_GetRelativeMouseState(int $x, int $y)
 * @method int SDL_GetRenderDrawBlendMode(RendererPtr $renderer, int|CIntPtr $blendMode)
 * @method int SDL_GetRenderDrawColor(RendererPtr $renderer, int $r, int $g, int $b, int $a)
 * @method int SDL_GetRenderDriverInfo(int $index, RendererInfoPtr $info)
 * @method TexturePtr SDL_GetRenderTarget(RendererPtr $renderer)
 * @method RendererPtr SDL_GetRenderer(WindowPtr $window)
 * @method int SDL_GetRendererInfo(RendererPtr $renderer, RendererInfoPtr $info)
 * @method int SDL_GetRendererOutputSize(RendererPtr $renderer, int $w, int $h)
 * @method string SDL_GetRevision()
 * @method int SDL_GetRevisionNumber()
 * @method int|CIntPtr SDL_GetScancodeFromKey(int|CIntPtr $key)
 * @method int|CIntPtr SDL_GetScancodeFromName(string $name)
 * @method string SDL_GetScancodeName(int|CIntPtr $scancode)
 * @method int SDL_GetShapedWindowMode(WindowPtr $window, WindowShapeModePtr $shape_mode)
 * @method int SDL_GetSurfaceAlphaMod(SurfacePtr $surface, int $alpha)
 * @method int SDL_GetSurfaceBlendMode(SurfacePtr $surface, int|CIntPtr $blendMode)
 * @method int SDL_GetSurfaceColorMod(SurfacePtr $surface, int $r, int $g, int $b)
 * @method int SDL_GetSystemRAM()
 * @method int SDL_GetTextureAlphaMod(TexturePtr $texture, int $alpha)
 * @method int SDL_GetTextureBlendMode(TexturePtr $texture, int|CIntPtr $blendMode)
 * @method int SDL_GetTextureColorMod(TexturePtr $texture, int $r, int $g, int $b)
 * @method int SDL_GetThreadID(ThreadPtr $thread)
 * @method string|CCharPtr SDL_GetThreadName(ThreadPtr $thread)
 * @method int SDL_GetTicks()
 * @method int|CIntPtr SDL_GetTouchDevice(int $index)
 * @method int|CIntPtr SDL_GetTouchDeviceType(int|CIntPtr $touchID)
 * @method FingerPtr SDL_GetTouchFinger(int|CIntPtr $touchID, int $index)
 * @method void SDL_GetVersion(VersionPtr $ver)
 * @method string SDL_GetVideoDriver(int $index)
 * @method int SDL_GetWindowBordersSize(WindowPtr $window, int $top, int $left, int $bottom, int $right)
 * @method float SDL_GetWindowBrightness(WindowPtr $window)
 * @method void SDL_GetWindowData(WindowPtr $window, string $name)
 * @method int SDL_GetWindowDisplayIndex(WindowPtr $window)
 * @method int SDL_GetWindowDisplayMode(WindowPtr $window, DisplayModePtr $mode)
 * @method int SDL_GetWindowFlags(WindowPtr $window)
 * @method WindowPtr SDL_GetWindowFromID(int $id)
 * @method int SDL_GetWindowGammaRamp(WindowPtr $window, int $red, int $green, int $blue)
 * @method int SDL_GetWindowGrab(WindowPtr $window)
 * @method int SDL_GetWindowID(WindowPtr $window)
 * @method void SDL_GetWindowMaximumSize(WindowPtr $window, int $w, int $h)
 * @method void SDL_GetWindowMinimumSize(WindowPtr $window, int $w, int $h)
 * @method int SDL_GetWindowOpacity(WindowPtr $window, float $out_opacity)
 * @method int SDL_GetWindowPixelFormat(WindowPtr $window)
 * @method void SDL_GetWindowPosition(WindowPtr $window, int $x, int $y)
 * @method void SDL_GetWindowSize(WindowPtr $window, int $w, int $h)
 * @method SurfacePtr|Surface[] SDL_GetWindowSurface(WindowPtr $window)
 * @method string SDL_GetWindowTitle(WindowPtr $window)
 * @method int|CIntPtr SDL_GetYUVConversionMode()
 * @method int|CIntPtr SDL_GetYUVConversionModeForResolution(int $width, int $height)
 * @method void SDL_HapticClose(HapticPtr $haptic)
 * @method void SDL_HapticDestroyEffect(HapticPtr $haptic, int $effect)
 * @method int SDL_HapticEffectSupported(HapticPtr $haptic, HapticEffectPtr $effect)
 * @method int SDL_HapticGetEffectStatus(HapticPtr $haptic, int $effect)
 * @method int SDL_HapticIndex(HapticPtr $haptic)
 * @method string SDL_HapticName(int $device_index)
 * @method int SDL_HapticNewEffect(HapticPtr $haptic, HapticEffectPtr $effect)
 * @method int SDL_HapticNumAxes(HapticPtr $haptic)
 * @method int SDL_HapticNumEffects(HapticPtr $haptic)
 * @method int SDL_HapticNumEffectsPlaying(HapticPtr $haptic)
 * @method HapticPtr SDL_HapticOpen(int $device_index)
 * @method HapticPtr SDL_HapticOpenFromJoystick(JoystickPtr $joystick)
 * @method HapticPtr SDL_HapticOpenFromMouse()
 * @method int SDL_HapticOpened(int $device_index)
 * @method int SDL_HapticPause(HapticPtr $haptic)
 * @method int SDL_HapticQuery(HapticPtr $haptic)
 * @method int SDL_HapticRumbleInit(HapticPtr $haptic)
 * @method int SDL_HapticRumblePlay(HapticPtr $haptic, float $strength, int $length)
 * @method int SDL_HapticRumbleStop(HapticPtr $haptic)
 * @method int SDL_HapticRumbleSupported(HapticPtr $haptic)
 * @method int SDL_HapticRunEffect(HapticPtr $haptic, int $effect, int $iterations)
 * @method int SDL_HapticSetAutocenter(HapticPtr $haptic, int $autocenter)
 * @method int SDL_HapticSetGain(HapticPtr $haptic, int $gain)
 * @method int SDL_HapticStopAll(HapticPtr $haptic)
 * @method int SDL_HapticStopEffect(HapticPtr $haptic, int $effect)
 * @method int SDL_HapticUnpause(HapticPtr $haptic)
 * @method int SDL_HapticUpdateEffect(HapticPtr $haptic, int $effect, HapticEffectPtr $data)
 * @method int SDL_Has3DNow()
 * @method int SDL_HasAVX()
 * @method int SDL_HasAVX2()
 * @method int SDL_HasAVX512F()
 * @method int SDL_HasAltiVec()
 * @method int SDL_HasClipboardText()
 * @method int SDL_HasColorKey(SurfacePtr $surface)
 * @method int SDL_HasEvent(int $type)
 * @method int SDL_HasEvents(int $minType, int $maxType)
 * @method int SDL_HasIntersection(RectPtr $A, RectPtr $B)
 * @method int SDL_HasMMX()
 * @method int SDL_HasNEON()
 * @method int SDL_HasRDTSC()
 * @method int SDL_HasSSE()
 * @method int SDL_HasSSE2()
 * @method int SDL_HasSSE3()
 * @method int SDL_HasSSE41()
 * @method int SDL_HasSSE42()
 * @method int SDL_HasScreenKeyboardSupport()
 * @method void SDL_HideWindow(WindowPtr $window)
 * @method int SDL_Init(int $flags)
 * @method int SDL_InitSubSystem(int $flags)
 * @method int SDL_IntersectRect(RectPtr $A, RectPtr $B, RectPtr $result)
 * @method int SDL_IntersectRectAndLine(RectPtr $rect, int $X1, int $Y1, int $X2, int $Y2)
 * @method int SDL_IsGameController(int $joystick_index)
 * @method int SDL_IsScreenKeyboardShown(WindowPtr $window)
 * @method int SDL_IsScreenSaverEnabled()
 * @method int SDL_IsShapedWindow(WindowPtr $window)
 * @method int SDL_IsTablet()
 * @method int SDL_IsTextInputActive()
 * @method void SDL_JoystickClose(JoystickPtr $joystick)
 * @method int|CIntPtr SDL_JoystickCurrentPowerLevel(JoystickPtr $joystick)
 * @method int SDL_JoystickEventState(int $state)
 * @method JoystickPtr SDL_JoystickFromInstanceID(int|CIntPtr $joyid)
 * @method int SDL_JoystickGetAttached(JoystickPtr $joystick)
 * @method int SDL_JoystickGetAxis(JoystickPtr $joystick, int $axis)
 * @method int SDL_JoystickGetAxisInitialState(JoystickPtr $joystick, int $axis, int $state)
 * @method int SDL_JoystickGetBall(JoystickPtr $joystick, int $ball, int $dx, int $dy)
 * @method int SDL_JoystickGetButton(JoystickPtr $joystick, int $button)
 * @method JoystickGUID SDL_JoystickGetDeviceGUID(int $device_index)
 * @method int|CIntPtr SDL_JoystickGetDeviceInstanceID(int $device_index)
 * @method int SDL_JoystickGetDevicePlayerIndex(int $device_index)
 * @method int SDL_JoystickGetDeviceProduct(int $device_index)
 * @method int SDL_JoystickGetDeviceProductVersion(int $device_index)
 * @method int|CIntPtr SDL_JoystickGetDeviceType(int $device_index)
 * @method int SDL_JoystickGetDeviceVendor(int $device_index)
 * @method JoystickGUID SDL_JoystickGetGUID(JoystickPtr $joystick)
 * @method JoystickGUID SDL_JoystickGetGUIDFromString(string $pchGUID)
 * @method void SDL_JoystickGetGUIDString(JoystickGUID $guid, string $pszGUID, int $cbGUID)
 * @method int SDL_JoystickGetHat(JoystickPtr $joystick, int $hat)
 * @method int SDL_JoystickGetPlayerIndex(JoystickPtr $joystick)
 * @method int SDL_JoystickGetProduct(JoystickPtr $joystick)
 * @method int SDL_JoystickGetProductVersion(JoystickPtr $joystick)
 * @method int|CIntPtr SDL_JoystickGetType(JoystickPtr $joystick)
 * @method int SDL_JoystickGetVendor(JoystickPtr $joystick)
 * @method int|CIntPtr SDL_JoystickInstanceID(JoystickPtr $joystick)
 * @method int SDL_JoystickIsHaptic(JoystickPtr $joystick)
 * @method string SDL_JoystickName(JoystickPtr $joystick)
 * @method string SDL_JoystickNameForIndex(int $device_index)
 * @method int SDL_JoystickNumAxes(JoystickPtr $joystick)
 * @method int SDL_JoystickNumBalls(JoystickPtr $joystick)
 * @method int SDL_JoystickNumButtons(JoystickPtr $joystick)
 * @method int SDL_JoystickNumHats(JoystickPtr $joystick)
 * @method JoystickPtr SDL_JoystickOpen(int $device_index)
 * @method int SDL_JoystickRumble(JoystickPtr $joystick, int $low_frequency_rumble, int $high_frequency_rumble, int $duration_ms)
 * @method void SDL_JoystickUpdate()
 * @method SurfacePtr SDL_LoadBMP_RW(RWopsPtr $src, int $freesrc)
 * @method int SDL_LoadDollarTemplates(int|CIntPtr $touchId, RWopsPtr $src)
 * @method void SDL_LoadFile(string $file, int $datasize)
 * @method void SDL_LoadFile_RW(RWopsPtr $src, int $datasize, int $freesrc)
 * @method void SDL_LoadFunction(CPtr $handle, string $name)
 * @method void SDL_LoadObject(string $sofile)
 * @method AudioSpecPtr SDL_LoadWAV_RW(RWopsPtr $src, int $freesrc, AudioSpecPtr $spec, int|CIntPtrPtr $audio_buf, int|CIntPtr $audio_len)
 * @method void SDL_LockAudio()
 * @method void SDL_LockAudioDevice(int|CIntPtr $dev)
 * @method void SDL_LockJoysticks()
 * @method int SDL_LockMutex(mutexPtr $mutex)
 * @method int SDL_LockSurface(SurfacePtr $surface)
 * @method int SDL_LockTexture(TexturePtr $texture, RectPtr $rect, CPtrPtr $pixels, int $pitch)
 * @method void SDL_Log(string $fmt)
 * @method void SDL_LogCritical(int $category, string $fmt)
 * @method void SDL_LogDebug(int $category, string $fmt)
 * @method void SDL_LogError(int $category, string $fmt)
 * @method void SDL_LogGetOutputFunction(LogOutputFunctionPtr $callback, CPtrPtr $userdata)
 * @method LogPriority SDL_LogGetPriority(int $category)
 * @method void SDL_LogInfo(int $category, string $fmt)
 * @method void SDL_LogMessage(int $category, LogPriority $priority, string $fmt)
 * @method void SDL_LogMessageV(int $category, LogPriority $priority, string $fmt, object $ap)
 * @method void SDL_LogResetPriorities()
 * @method void SDL_LogSetAllPriority(LogPriority $priority)
 * @method void SDL_LogSetOutputFunction(LogOutputFunctionPtr $callback, CPtr $userdata)
 * @method void SDL_LogSetPriority(int $category, LogPriority $priority)
 * @method void SDL_LogVerbose(int $category, string $fmt)
 * @method void SDL_LogWarn(int $category, string $fmt)
 * @method int SDL_LowerBlit(SurfacePtr $src, RectPtr $srcrect, SurfacePtr $dst, RectPtr $dstrect)
 * @method int SDL_LowerBlitScaled(SurfacePtr $src, RectPtr $srcrect, SurfacePtr $dst, RectPtr $dstrect)
 * @method int SDL_MapRGB(PixelFormatPtr $format, int $r, int $g, int $b)
 * @method int SDL_MapRGBA(PixelFormatPtr $format, int $r, int $g, int $b, int $a)
 * @method int SDL_MasksToPixelFormatEnum(int $bpp, int $Rmask, int $Gmask, int $Bmask, int $Amask)
 * @method void SDL_MaximizeWindow(WindowPtr $window)
 * @method void SDL_MemoryBarrierAcquireFunction()
 * @method void SDL_MemoryBarrierReleaseFunction()
 * @method void SDL_MinimizeWindow(WindowPtr $window)
 * @method void SDL_MixAudio(int $dst, int $src, int $len, int $volume)
 * @method void SDL_MixAudioFormat(int $dst, int $src, int|int $format, int $len, int $volume)
 * @method int SDL_MouseIsHaptic()
 * @method AudioStreamPtr SDL_NewAudioStream(int|int $src_format, int $src_channels, int $src_rate, int|int $dst_format, int $dst_channels, int $dst_rate)
 * @method int SDL_NumHaptics()
 * @method int SDL_NumJoysticks()
 * @method int SDL_NumSensors()
 * @method int SDL_OpenAudio(AudioSpecPtr $desired, AudioSpecPtr $obtained)
 * @method int|CIntPtr SDL_OpenAudioDevice(string $device, int $iscapture, AudioSpecPtr $desired, AudioSpecPtr $obtained, int $allowed_changes)
 * @method void SDL_PauseAudio(int $pause_on)
 * @method void SDL_PauseAudioDevice(int|CIntPtr $dev, int $pause_on)
 * @method int SDL_PeepEvents(EventPtr $events, int $numevents, int $action, int $minType, int $maxType)
 * @method int SDL_PixelFormatEnumToMasks(int $format, int $bpp, int $Rmask, int $Gmask, int $Bmask, int $Amask)
 * @method int SDL_PollEvent(EventPtr $event)
 * @method void SDL_PumpEvents()
 * @method int SDL_PushEvent(EventPtr $event)
 * @method int SDL_QueryTexture(TexturePtr $texture, int $format, int $access, int $w, int $h)
 * @method int SDL_QueueAudio(int|CIntPtr $dev, CPtr $data, int $len)
 * @method void SDL_Quit()
 * @method void SDL_QuitSubSystem(int $flags)
 * @method RWopsPtr SDL_RWFromConstMem(CPtr $mem, int $size)
 * @method RWopsPtr SDL_RWFromFP(CPtr $fp, int $autoclose)
 * @method RWopsPtr SDL_RWFromFile(string|CCharPtr $file, string|CCharPtr $mode)
 * @method RWopsPtr SDL_RWFromMem(CPtr $mem, int $size)
 * @method int SDL_RWclose(RWopsPtr $context)
 * @method int SDL_RWread(RWopsPtr $context, CPtr $ptr, int $size, int $maxnum)
 * @method int SDL_RWseek(RWopsPtr $context, int $offset, int $whence)
 * @method int SDL_RWsize(RWopsPtr $context)
 * @method int SDL_RWtell(RWopsPtr $context)
 * @method int SDL_RWwrite(RWopsPtr $context, CPtr $ptr, int $size, int $num)
 * @method void SDL_RaiseWindow(WindowPtr $window)
 * @method int SDL_ReadBE16(RWopsPtr $src)
 * @method int SDL_ReadBE32(RWopsPtr $src)
 * @method int SDL_ReadBE64(RWopsPtr $src)
 * @method int SDL_ReadLE16(RWopsPtr $src)
 * @method int SDL_ReadLE32(RWopsPtr $src)
 * @method int SDL_ReadLE64(RWopsPtr $src)
 * @method int SDL_ReadU8(RWopsPtr $src)
 * @method int SDL_RecordGesture(int|CIntPtr $touchId)
 * @method int SDL_RegisterApp(string|CCharPtr $name, int $style, $hInst)
 * @method int SDL_RegisterEvents(int $numevents)
 * @method int SDL_RemoveTimer(int $id)
 * @method int SDL_RenderClear(RendererPtr $renderer)
 * @method int SDL_RenderCopy(RendererPtr $renderer, TexturePtr $texture, RectPtr|null $srcrect, RectPtr|null $dstrect)
 * @method int SDL_RenderCopyEx(RendererPtr $renderer, TexturePtr $texture, RectPtr $srcrect, RectPtr $dstrect, float $angle, int $center, int $flip)
 * @method int SDL_RenderCopyExF(RendererPtr $renderer, TexturePtr $texture, RectPtr $srcrect, FRectPtr $dstrect, float $angle, int $center, int $flip)
 * @method int SDL_RenderCopyF(RendererPtr $renderer, TexturePtr $texture, RectPtr $srcrect, FRectPtr $dstrect)
 * @method int SDL_RenderDrawLine(RendererPtr $renderer, int $x1, int $y1, int $x2, int $y2)
 * @method int SDL_RenderDrawLineF(RendererPtr $renderer, float $x1, float $y1, float $x2, float $y2)
 * @method int SDL_RenderDrawLines(RendererPtr $renderer, int $points, int $count)
 * @method int SDL_RenderDrawLinesF(RendererPtr $renderer, int $points, int $count)
 * @method int SDL_RenderDrawPoint(RendererPtr $renderer, int $x, int $y)
 * @method int SDL_RenderDrawPointF(RendererPtr $renderer, float $x, float $y)
 * @method int SDL_RenderDrawPoints(RendererPtr $renderer, int $points, int $count)
 * @method int SDL_RenderDrawPointsF(RendererPtr $renderer, int $points, int $count)
 * @method int SDL_RenderDrawRect(RendererPtr $renderer, RectPtr $rect)
 * @method int SDL_RenderDrawRectF(RendererPtr $renderer, FRectPtr $rect)
 * @method int SDL_RenderDrawRects(RendererPtr $renderer, RectPtr $rects, int $count)
 * @method int SDL_RenderDrawRectsF(RendererPtr $renderer, FRectPtr $rects, int $count)
 * @method int SDL_RenderFillRect(RendererPtr $renderer, RectPtr $rect)
 * @method int SDL_RenderFillRectF(RendererPtr $renderer, FRectPtr $rect)
 * @method int SDL_RenderFillRects(RendererPtr $renderer, RectPtr $rects, int $count)
 * @method int SDL_RenderFillRectsF(RendererPtr $renderer, FRectPtr $rects, int $count)
 * @method int SDL_RenderFlush(RendererPtr $renderer)
 * @method void SDL_RenderGetClipRect(RendererPtr $renderer, RectPtr $rect)
 * @method IDirect3DDevice9 SDL_RenderGetD3D9Device(RendererPtr $renderer)
 * @method int SDL_RenderGetIntegerScale(RendererPtr $renderer)
 * @method void SDL_RenderGetLogicalSize(RendererPtr $renderer, int $w, int $h)
 * @method void SDL_RenderGetMetalCommandEncoder(RendererPtr $renderer)
 * @method void SDL_RenderGetMetalLayer(RendererPtr $renderer)
 * @method void SDL_RenderGetScale(RendererPtr $renderer, float $scaleX, float $scaleY)
 * @method void SDL_RenderGetViewport(RendererPtr $renderer, RectPtr $rect)
 * @method int SDL_RenderIsClipEnabled(RendererPtr $renderer)
 * @method void SDL_RenderPresent(RendererPtr $renderer)
 * @method int SDL_RenderReadPixels(RendererPtr $renderer, RectPtr $rect, int $format, CPtr $pixels, int $pitch)
 * @method int SDL_RenderSetClipRect(RendererPtr $renderer, RectPtr $rect)
 * @method int SDL_RenderSetIntegerScale(RendererPtr $renderer, int $enable)
 * @method int SDL_RenderSetLogicalSize(RendererPtr $renderer, int $w, int $h)
 * @method int SDL_RenderSetScale(RendererPtr $renderer, float $scaleX, float $scaleY)
 * @method int SDL_RenderSetViewport(RendererPtr $renderer, RectPtr $rect)
 * @method int SDL_RenderTargetSupported(RendererPtr $renderer)
 * @method int SDL_ReportAssertion(AssertDataPtr|CPtr $data, string|CCharPtr $func, string|CCharPtr $file, int $line)
 * @method void SDL_ResetAssertionReport()
 * @method void SDL_RestoreWindow(WindowPtr $window)
 * @method void SDL_SIMDAlloc(int $len)
 * @method void SDL_SIMDFree(CPtr $ptr)
 * @method int SDL_SIMDGetAlignment()
 * @method int SDL_SaveAllDollarTemplates(RWopsPtr $dst)
 * @method int SDL_SaveBMP_RW(SurfacePtr $surface, RWopsPtr $dst, int $freedst)
 * @method int SDL_SaveDollarTemplate(int|CIntPtr $gestureId, RWopsPtr $dst)
 * @method int SDL_SemPost(SemaphorePtr $sem)
 * @method int SDL_SemTryWait(SemaphorePtr $sem)
 * @method int SDL_SemValue(SemaphorePtr $sem)
 * @method int SDL_SemWait(SemaphorePtr $sem)
 * @method int SDL_SemWaitTimeout(SemaphorePtr $sem, int $ms)
 * @method void SDL_SensorClose(SensorPtr $sensor)
 * @method SensorPtr SDL_SensorFromInstanceID(int $instance_id)
 * @method int SDL_SensorGetData(SensorPtr $sensor, float $data, int $num_values)
 * @method int SDL_SensorGetDeviceInstanceID(int $device_index)
 * @method string SDL_SensorGetDeviceName(int $device_index)
 * @method int SDL_SensorGetDeviceNonPortableType(int $device_index)
 * @method int SDL_SensorGetDeviceType(int $device_index)
 * @method int SDL_SensorGetInstanceID(SensorPtr $sensor)
 * @method string SDL_SensorGetName(SensorPtr $sensor)
 * @method int SDL_SensorGetNonPortableType(SensorPtr $sensor)
 * @method int SDL_SensorGetType(SensorPtr $sensor)
 * @method SensorPtr SDL_SensorOpen(int $device_index)
 * @method void SDL_SensorUpdate()
 * @method void SDL_SetAssertionHandler(\Closure|CData $handler, CPtr $userdata)
 * @method int SDL_SetClipRect(SurfacePtr $surface, RectPtr $rect)
 * @method int SDL_SetClipboardText(string $text)
 * @method int SDL_SetColorKey(SurfacePtr $surface, int $flag, int $key)
 * @method void SDL_SetCursor(CursorPtr $cursor)
 * @method int SDL_SetError(string|CCharPtr $fmt)
 * @method void SDL_SetEventFilter(EventFilterPtr $filter, CPtr $userdata)
 * @method int SDL_SetHint(string $name, string $value)
 * @method int SDL_SetHintWithPriority(string $name, string $value, int $priority)
 * @method void SDL_SetMainReady()
 * @method void SDL_SetModState(int|CIntPtr $modstate)
 * @method int SDL_SetPaletteColors(PalettePtr $palette, ColorPtr $colors, int $firstcolor, int $ncolors)
 * @method int SDL_SetPixelFormatPalette(PixelFormatPtr $format, PalettePtr $palette)
 * @method int SDL_SetRelativeMouseMode(int $enabled)
 * @method int SDL_SetRenderDrawBlendMode(RendererPtr $renderer, int|CIntPtr $blendMode)
 * @method int SDL_SetRenderDrawColor(RendererPtr $renderer, int $r, int $g, int $b, int $a)
 * @method int SDL_SetRenderTarget(RendererPtr $renderer, TexturePtr $texture)
 * @method int SDL_SetSurfaceAlphaMod(SurfacePtr $surface, int $alpha)
 * @method int SDL_SetSurfaceBlendMode(SurfacePtr $surface, int|CIntPtr $blendMode)
 * @method int SDL_SetSurfaceColorMod(SurfacePtr $surface, int $r, int $g, int $b)
 * @method int SDL_SetSurfacePalette(SurfacePtr $surface, PalettePtr $palette)
 * @method int SDL_SetSurfaceRLE(SurfacePtr $surface, int $flag)
 * @method void SDL_SetTextInputRect(RectPtr $rect)
 * @method int SDL_SetTextureAlphaMod(TexturePtr $texture, int $alpha)
 * @method int SDL_SetTextureBlendMode(TexturePtr $texture, int|CIntPtr $blendMode)
 * @method int SDL_SetTextureColorMod(TexturePtr $texture, int $r, int $g, int $b)
 * @method int SDL_SetThreadPriority(int $priority)
 * @method void SDL_SetWindowBordered(WindowPtr $window, int $bordered)
 * @method int SDL_SetWindowBrightness(WindowPtr $window, float $brightness)
 * @method void SDL_SetWindowData(WindowPtr $window, string $name, CPtr $userdata)
 * @method int SDL_SetWindowDisplayMode(WindowPtr $window, DisplayModePtr $mode)
 * @method int SDL_SetWindowFullscreen(WindowPtr $window, int $flags)
 * @method int SDL_SetWindowGammaRamp(WindowPtr $window, int $red, int $green, int $blue)
 * @method void SDL_SetWindowGrab(WindowPtr $window, int $grabbed)
 * @method int SDL_SetWindowHitTest(WindowPtr $window, \Closure|CData $callback, CPtr $callback_data)
 * @method void SDL_SetWindowIcon(WindowPtr $window, SurfacePtr $icon)
 * @method int SDL_SetWindowInputFocus(WindowPtr $window)
 * @method void SDL_SetWindowMaximumSize(WindowPtr $window, int $max_w, int $max_h)
 * @method void SDL_SetWindowMinimumSize(WindowPtr $window, int $min_w, int $min_h)
 * @method int SDL_SetWindowModalFor(WindowPtr $modal_window, WindowPtr $parent_window)
 * @method int SDL_SetWindowOpacity(WindowPtr $window, float $opacity)
 * @method void SDL_SetWindowPosition(WindowPtr $window, int $x, int $y)
 * @method void SDL_SetWindowResizable(WindowPtr $window, int $resizable)
 * @method int SDL_SetWindowShape(WindowPtr $window, SurfacePtr $shape, WindowShapeModePtr $shape_mode)
 * @method void SDL_SetWindowSize(WindowPtr $window, int $w, int $h)
 * @method void SDL_SetWindowTitle(WindowPtr $window, string $title)
 * @method void SDL_SetWindowsMessageHook(\Closure $callback, CPtr $userdata)
 * @method void SDL_SetYUVConversionMode(int|CIntPtr $mode)
 * @method int SDL_ShowCursor(int $toggle)
 * @method int SDL_ShowMessageBox(MessageBoxDataPtr $messageboxdata, int|CIntPtr $buttonid)
 * @method int SDL_ShowSimpleMessageBox(int $flags, string|CData $title, string|CData $message, ?Window|?CData $window)
 * @method void SDL_ShowWindow(WindowPtr $window)
 * @method int SDL_SoftStretch(SurfacePtr $src, RectPtr $srcrect, SurfacePtr $dst, RectPtr $dstrect)
 * @method void SDL_StartTextInput()
 * @method void SDL_StopTextInput()
 * @method int SDL_TLSCreate()
 * @method CPtr SDL_TLSGet(int $id)
 * @method int SDL_TLSSet(int $id, CPtr $value, \Closure $destructor)
 * @method int SDL_ThreadID()
 * @method int SDL_TryLockMutex(mutexPtr $mutex)
 * @method void SDL_UnionRect(RectPtr $A, RectPtr $B, RectPtr $result)
 * @method void SDL_UnloadObject(CPtr $handle)
 * @method void SDL_UnlockAudio()
 * @method void SDL_UnlockAudioDevice(int|CIntPtr $dev)
 * @method void SDL_UnlockJoysticks()
 * @method int SDL_UnlockMutex(mutexPtr $mutex)
 * @method void SDL_UnlockSurface(SurfacePtr $surface)
 * @method void SDL_UnlockTexture(TexturePtr $texture)
 * @method void SDL_UnregisterApp()
 * @method int SDL_UpdateTexture(TexturePtr $texture, RectPtr $rect, CPtr $pixels, int $pitch)
 * @method int SDL_UpdateWindowSurface(WindowPtr $window)
 * @method int SDL_UpdateWindowSurfaceRects(WindowPtr $window, RectPtr $rects, int $numrects)
 * @method int SDL_UpdateYUVTexture(TexturePtr $texture, RectPtr $rect, int $Yplane, int $Ypitch, int $Uplane, int $Upitch, int $Vplane, int $Vpitch)
 * @method int SDL_UpperBlit(SurfacePtr $src, RectPtr $srcrect, SurfacePtr $dst, RectPtr $dstrect)
 * @method int SDL_UpperBlitScaled(SurfacePtr $src, RectPtr $srcrect, SurfacePtr $dst, RectPtr $dstrect)
 * @method int SDL_VideoInit(string $driver_name)
 * @method void SDL_VideoQuit()
 * @method int SDL_WaitEvent(EventPtr $event)
 * @method int SDL_WaitEventTimeout(EventPtr $event, int $timeout)
 * @method void SDL_WaitThread(ThreadPtr $thread, int|CIntPtr $status)
 * @method int SDL_WarpMouseGlobal(int $x, int $y)
 * @method void SDL_WarpMouseInWindow(WindowPtr $window, int $x, int $y)
 * @method int SDL_WasInit(int $flags)
 * @method int SDL_WriteBE16(RWopsPtr $dst, int $value)
 * @method int SDL_WriteBE32(RWopsPtr $dst, int $value)
 * @method int SDL_WriteBE64(RWopsPtr $dst, int $value)
 * @method int SDL_WriteLE16(RWopsPtr $dst, int $value)
 * @method int SDL_WriteLE32(RWopsPtr $dst, int $value)
 * @method int SDL_WriteLE64(RWopsPtr $dst, int $value)
 * @method int SDL_WriteU8(RWopsPtr $dst, int $value)
 * @formatter:on
 */
interface SDLNativeApiAutocomplete
{

}
